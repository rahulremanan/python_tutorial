-- Install linux dependencies for Tensorflow --

sudo apt install python3-dev python3-pip cython gfortran    \
                 libhdf5-103 libhdf5-dev hdf5-tools h5utils \
                 pkg-config libfreetype6-dev
sudo python3 -m pip install grpcio  grpcio-tools cycler kiwisolver \
                            absl-py astunparse gast matplotlib     \
                            google-pasta opt-einsum          \
                            tensorboard tensorflow-estimator \
                            termcolor wrapt Cython           \
                            setuptools pybind11 Sphinx tables

-- Install numpy --
sudo apt remove python3-numpy
sudo python3 -m pip uninstall numpy
git clone https://github.com/numpy/numpy
git checkout
python setup.py build -j 4 install --prefix $HOME/.local

-- Install scipy --

git clone https://github.com/scipy/scipy.git

cd scipy; git clean -xdf
python3 setup.py install --user

-- Install h5py (verified) --

git clone https://github.com/h5py/h5py

cd ./h5py; git checkout; python3 setup.py install --prefix $HOME/.local

## (Not verified) ##
pip3 install -v . --no-cache-dir
sudo python3 setup.py build_ext --inplace --hdf5=/usr/lib/aarch64-linux-gnu/hdf5/serial
sudo python3 setup.py install --hdf5=/usr/lib/aarch64-linux-gnu/hdf5/serial


-- Install Tensorflow pip package dependencies --

sudo python3 -m pip install -U --user pip six numpy wheel setuptools mock 'future>=0.17.1'
sudo python3 -m pip install -U --user keras_applications --no-deps keras_preprocessing --no-deps

-- Get Tensorflow installation files --

git clone https://github.com/tensorflow/tensorflow.git
cd tensorflow

-- Configure tensorflow installer --

./configure

# Get python 3 executable path by:
python3
>>>import sys
>>>print(sys.executable)
>>>exit()
# Typical location: /usr/bin/python3

# Disable every options including XLA JIT during Tensorflow configuration

-- Build Tensorflow installer using Bazel --

# Validated:

bazel --output_user_root=../.cache/bazel/                    \
      --host_jvm_args=-Xmx512m                               \
      --host_jvm_args=-Xms256m                               \
      build --jobs HOST_CPUS-3                               \
            --ram_utilization_factor=50                      \
            --local_cpu_resources=HOST_CPUS-3                \
            --local_ram_resources=HOST_RAM*.5                \
            --config=opt                                     \
            --verbose_failures                               \
            //tensorflow/tools/pip_package:build_pip_package

# Experimental:

bazel build -c opt --copt="-mfpu=neon-vfpv4"                           \
                   --copt="-funsafe-math-optimizations"                \
                   --copt="-ftree-vectorize"                           \
                   --copt="-fomit-frame-pointer"                       \
                   --local_resources 1024,1.0,1.0                      \
                   --verbose_failures                                  \
                   tensorflow/tools/pip_package:build_pip_package

-- Or --
# With explicit environment path:
# Not validated:

bazel build -c opt --copt="-mfpu=neon-vfpv4"                          \
                   --copt="-funsafe-math-optimizations"               \
                   --copt="-ftree-vectorize"                          \
                   --copt="-fomit-frame-pointer"                      \
                   --local_resources 1024,1.0,1.0                     \
                   --verbose_failures                                 \
                   tensorflow/tools/pip_package:build_pip_package     \
                   --action_env="LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"

# Build pip installation wheel:

./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

# Install Tensorflow python package:

sudo pip3 install /tmp/tensorflow_pkg/tensorflow*.whl --no-deps

# Run a simple test for tensorflow:
python3 -c "import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))"

-- Another test using matrix multiplication --

python3

>>>import subprocess
>>>print((subprocess.check_output("lscpu", shell=True).strip()).decode())
>>>import tensorflow as tf

>>>print('Using tensorflow version: {} ...'.format(tf.__version__))
>>>print('Visible devices for tensorflow: {} ...'.format(tf.config.list_physical_devices()))

>>>with tf.device('/cpu:0'):
...    a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
...    b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
...    c_cpu = tf.matmul(a, b)

>>>print ('\nMatrix multiplication result using CPU: {}'.format(c_cpu))