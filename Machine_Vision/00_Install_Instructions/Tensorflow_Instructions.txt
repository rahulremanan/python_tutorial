sudo apt-get install -y pkg-config zip gcc-5 g++-5 zlib1g-dev unzip python3-numpy python3-dev python3-pip python3-wheel

#For CUDA
sudo apt-get install libcupti-dev

git clone https://github.com/tensorflow/tensorflow 
cd tensorflow
git checkout

sudo apt-get autoremove openjdk-9-jre-headless
sudo apt-get remove default-jdk
sudo apt-get purge openjdk-9-jre-headless gcj-4.9-jre-headless

sudo apt-get install -y openjdk-8-jdk
echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
sudo apt-get update && sudo apt-get install bazel
sudo apt-get upgrade bazel

python3
>>> import sys
>>> print(sys.executable)
>>> print(sys.path)
>>> ctrl+D
which gcc
gcc --version
g++ --version

-- Optional GCC Downgrade --

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 16
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 16

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 11
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 11

add: cxx_builtin_include_directory: "/usr/local/cuda/targets/x86_64-linux/include" to the file tensorflow/third_party/gpus/crosstool/CROSSTOOL

Eg:
toolchain {
  abi_version: "local"
  abi_libc_version: "local"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "local"
  needsPic: true
  target_libc: "macosx"
  target_cpu: "darwin"
  target_system_name: "local"
  toolchain_identifier: "local_darwin"
  tool_path { name: "ar" path: "/usr/bin/libtool" }
  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
  tool_path { name: "cpp" path: "/usr/bin/cpp" }
  tool_path { name: "dwp" path: "/usr/bin/dwp" }
  tool_path { name: "gcc" path: "clang/bin/crosstool_wrapper_driver_is_not_gcc$
  cxx_flag: "-std=c++11"
  cxx_builtin_include_directory: "/usr/local/cuda-8.0/include"
...}


sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 15
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++ 12

After compiling TensorFlow you can use previous version of gcc calling above command with proper path to /usr/bin/gcc-6 -priority

## Configure installer:

./configure
sudo bazel build -c opt --config=cuda --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 --copt=-mfma //tensorflow/tools/pip_package:build_pip_package

--OR--

sudo bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package

--OR--

sudo bazel build -c opt --copt=-march="haswell" --config=cuda //tensorflow/tools/pip_package:build_pip_package

-- Without CUDA --

sudo bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package

-- OR --

sudo bazel build -c opt --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 --copt=-mfma //tensorflow/tools/pip_package:build_pip_package

-- Build the pip installer package --

sudo bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
sudo pip3 install /tmp/tensorflow_pkg/tensorflow-*.whl


## Fix for "module 'enum' has no attribute 'IntFlag'" error for tensorflow:

-- Purge PYTHONPATH and recreate the correct pointers --

# Purge PYTHONPATH

env | grep PYTHONPATH

# Export edited PYTHONPATH

export PYTHONPATH=[this is where you paste the corrected paths, no square brackets needed]

# Eg:

export PYTHONPATH=/usr/local/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages:/usr/local/lib/python3.6/dist-packages


## Keras installation:

sudo pip3 install h5py scipy matplotlib

git clone https://github.com/keras-team/keras.git
cd keras
sudo python3 setup.py install
